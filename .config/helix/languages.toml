# PYTHON
# **************************************************************************************
[[language]]
name = "python"
language-servers = [
  "basedpyright",
  "ruff",
  # "ty",
  # "pyrefly",
  # "pylyzer",
]
auto-format = true

[language-server.ruff]
command = "ruff"
args = ["server"]

[language-server.ruff.config.settings]
lineLength = 100

[language-server.ruff.config.settings.lint]
select = ["ALL"]
ignore = ["D", "S101", "E501", "PTH123", "TD003"]

[language-server.basedpyright.config]
typeCheckingMode = "basic"

[language-server.pylyzer]
command = "pylyzer"
args = ["--server"]

[language-server.ty]
command = "ty"
args = ["server"]

[language-server.pyrefly]
command = "pyrefly"
args = ["lsp"]

# RUST
# **************************************************************************************
[[language]]
name = "rust"
language-servers = ["rust-analyzer"]
auto-format = true
file-types = ["rs", "ers"]
rulers = [100]

[language.auto-pairs]
'(' = ')'
'{' = '}'
'[' = ']'
'"' = '"'
'<' = '>'

[language-server.rust-analyzer.config.check]
command = "clippy"

[language-server.rust-analyzer.config] # see here for more: https://rust-analyzer.github.io/book/configuration.html
closureReturnTypeHints.enable = "always"
inlayHints.enable = true
inlayHints.lifetimeElisionHints.enable = true
inlayHints.lifetimeElisionHints.useParameterNames = true

# LUA
# **************************************************************************************
[[language]]
name = "lua"
auto-format = true
indent = { tab-width = 4, unit = "    " }
formatter = { command = "stylua", args = ["--syntax", "All", "-"] }
rulers = [80]

# BASH
# **************************************************************************************
[[language]]
name = "bash"
auto-format = true
formatter = { command = "shfmt" }

# AWK
# **************************************************************************************
[[language]]
name = "awk"
formatter = { command = "gawk", timeout = 5, args = [
  "--file=/dev/stdin",
  "--pretty-print=/dev/stdout",
] }
auto-format = true

# R
# **************************************************************************************
[[language]]
name = "r"
language-servers = ["air", "r"]
auto-format = true
rulers = [80]

[language-server.air]
command = "air"
args = ["language-server"]


# JS/TS
# **************************************************************************************
[[language]]
name = "javascript"
language-servers = [
  { name = "typescript-language-server", except-features = ["format"] },
  "biome",
  # "deno-lsp",
  "vscode-eslint-language-server",
]
roots = [
  "biome.json",
  "biome.jsonc",
  "deno.json",
  "deno.jsonc",
  "package.json",
  "bunfig.toml",
]
auto-format = true

[language.auto-pairs]
'(' = ')'
'{' = '}'
'[' = ']'
'"' = '"'
'<' = '>'
'`' = '`'

[[language]]
name = "typescript"
language-servers = [
  { name = "typescript-language-server", except-features = ["format"] },
  "biome",
  # "vscode-eslint-language-server",
  "tailwindcss-ls",
]
roots = ["biome.json", "biome.jsonc", "deno.json", "deno.jsonc", "package.json"]
auto-format = true

[language.auto-pairs]
'(' = ')'
'{' = '}'
'[' = ']'
'"' = '"'
'<' = '>'
'`' = '`'

[[language]]
name = "jsx"
language-servers = [
  { name = "typescript-language-server", except-features = ["format"] },
  "biome",
  # "vscode-eslint-language-server",
  "tailwindcss-ls",
]
auto-format = true

[language.auto-pairs]
'(' = ')'
'{' = '}'
'[' = ']'
'"' = '"'
'<' = '>'
'`' = '`'

[[language]]
name = "tsx"
language-servers = [
  { name = "typescript-language-server", except-features = ["format"] },
  "biome",
  # "vscode-eslint-language-server",
  "tailwindcss-ls",
]
auto-format = true

[language.auto-pairs]
'(' = ')'
'{' = '}'
'[' = ']'
'"' = '"'
'<' = '>'
'`' = '`'

[language-server.astro-ls]
command = "astro-ls"
args = ["--stdio"]
config = { typescript = { tsdk = "/Users/nickminor/.bun/install/global/node_modules/typescript/lib" }, environment = "node" }

[[language]]
name = "astro"
scope = "source.astro"
injection-regex = "astro"
file-types = ["astro"]
roots = ["package.json", "astro.config.mjs"]
auto-format = true
formatter = { command = 'deno', args = [
  "fmt",
  "-",
  "--ext",
  "astro",
  "--unstable-component",
] }
language-servers = [
  "astro-ls",
  # "biome",
  # "vscode-eslint-language-server",
]

[language.auto-pairs]
'(' = ')'
'{' = '}'
'[' = ']'
'"' = '"'
'<' = '>'
'`' = '`'

[language-server.vuels]
command = "vue-language-server"
args = ["--stdio"]
# config = { vue = { hybridMode = false }, typescript = { tsdk = "~/.config/nvm/versions/node/v23.11.1/lib/node_modules/typescript/lib/" } }

[[language]]
name = "vue"
auto-format = true
formatter = { command = 'deno', args = [
  "fmt",
  "-",
  "--ext",
  "astro",
  "--unstable-component",
] }
language-servers = [
  "vuels",
  # "typescript-language-server",
  # "emmet-lsp",
]

[language.auto-pairs]
'(' = ')'
'{' = '}'
'[' = ']'
'"' = '"'
'<' = '>'
'`' = '`'

[[language-server.typescript-language-server.config.plugins]]
name = "@vue/typescript-plugin"
location = "~/.config/nvm/versions/node/v23.11.1/lib/node_modules/@vue/typescript-plugin"
languages = ["vue"]

[language-server.deno-lsp]
command = "deno"
args = ["lsp"]

[language-server.deno-lsp.config]
deno.enable = true

[language-server.deno-lsp.config.javascript.inlayHints]
parameterNames.enabled = { enabled = "all", suppressWhenArgumentMatchesName = true }
parameterTypes.enabled = false
variableTypes.enabled = false
propertyDeclarationTypes.enabled = false
functionLikeReturnTypes.enabled = false
enumMemberValues.enabled = false

[language-server.deno-lsp.config.typescript.inlayHints]
parameterNames.enabled = { enabled = "all", suppressWhenArgumentMatchesName = true }
parameterTypes.enabled = false
variableTypes.enabled = false
propertyDeclarationTypes.enabled = false
functionLikeReturnTypes.enabled = false
enumMemberValues.enabled = false

[language-server.biome]
command = "biome"
args = ["lsp-proxy"]

[language-server.emmet-lsp]
command = "emmet-language-server"
args = ["--stdio"]

# SQL
# **************************************************************************************
[[language]]
name = "sql"
auto-format = true
formatter = { command = 'deno', args = [
  "fmt",
  "-",
  "--ext",
  "sql",
  "--unstable-sql",
] }
language-servers = ["sql-language-server"]

[language-server.sql-language-server]
command = "sql-language-server"
args = ["up", "--method", "stdio"]

# GO
# **************************************************************************************
[[language]]
name = "go"
auto-format = true
formatter = { command = "goimports" }


# HASKELL
# **************************************************************************************
[[language]]
name = "haskell"
formatter = { command = "stylish-haskell", args = [] }
auto-format = true

# [[language]]
# name = "haskell"
# formatter = { command = "zsh", args = ["-c", "fourmolu --stdin-input-file $(pwd)" ] }
# auto-format = true

# OCAML
# **************************************************************************************
[[language]]
name = "ocaml"
file-types = ["ml", "mli"]
auto-format = true
indent = { tab-width = 2, unit = "  " }
formatter = { command = "ocamlformat", args = [
  "-",
  "--impl",
  "--enable-outside-detected-project", # Enable only if you want to format files outside of projects
] }

# GLEAM
# **************************************************************************************
[[language]]
name = "gleam"
auto-format = true

# ZIG
# **************************************************************************************
[[language]]
name = "zig"
auto-format = true
scope = "source.zig"
injection-regex = "zig"
file-types = ["zig"]
roots = ["build.zig"]
language-servers = ["zls"]
indent = { tab-width = 4, unit = "    " }

# SCHEME LISP
# **************************************************************************************
[[language]]
name = "scheme"
language-servers = ["steel-language-server"]

[language-server.steel-language-server]
command = "steel-language-server"
args = []

# MISCELLANEOUS CONFIGURATION, MARKUP, AND DOMAIN-SPECIFIC LANGS
# **************************************************************************************
[[language]]
name = "toml"
formatter = { command = "taplo", args = ["fmt", "-"] }

[[language]]
name = "html"
language-servers = [
  { name = "superhtml", except-features = [
    "format",
  ] },
  "vscode-html-language-server",
  { name = "tailwindcss-ls" },
]
auto-format = true

[language.auto-pairs]
'(' = ')'
'{' = '}'
'[' = ']'
'"' = '"'
'<' = '>'

[[language]]
name = "markdown"
scope = "source.md"
injection-regex = "md|markdown"
file-types = [
  "md",
  "markdown",
  "PULLREQ_EDITMSG",
  "mkd",
  "mdwn",
  "mdown",
  "markdn",
  "mdtxt",
  "mdtext",
  # "qmd",
  "workbook",
  "mdx",
]
roots = [".marksman.toml"]
language-servers = ["marksman"]
indent = { tab-width = 2, unit = "  " }
formatter = { command = 'deno', args = ["fmt", "-", "--ext", "md"] }
auto-format = true

[[language]]
name = "typst"
formatter.command = "typstyle"
auto-format = true

[[language]]
name = "slint"
auto-format = true

[[language]]
name = "css"
auto-format = false
language-servers = ["vscode-css-language-server", "tailwindcss-ls"]

[language-server.tailwindcss-ls]
command = "tailwindcss-language-server"
args = ["--stdio"]

[[language]]
name = "nix"
language-servers = ["nil"]
formatter = { command = "nixfmt" }
auto-format = true

[[language]]
file-types = ["nf", "nf.test", { glob = "nextflow.config" }]
auto-format = false
language-servers = ["nextflow-language-server"]
name = "nextflow"
grammar = "groovy"
scope = "source.nextflow"
comment-tokens = ["//"]
block-comment-tokens = { start = "/*", end = "*/" }
indent = { tab-width = 4, unit = "    " }

[language-server.nextflow-language-server]
command = "nextflow-language-server"

[language-server.nextflow-language-server.config.nextflow]
debug = true

[language-server.nextflow-language-server.config.nextflow.files]
exclude = [".pixi", ".git", ".nf-test", "work"]

[language-server.nextflow-language-server.config.nextflow.formatting]
harshilAlignment = true

[language-server.just-lsp]
command = "just-lsp"

[[language]]
name = "just"
auto-format = true
language-servers = ["just-lsp"]
formatter = { command = "just", args = ['--justfile', '/dev/stdin', '--dump'] }

[[language]]
name = "json"
formatter = { command = 'deno', args = ["fmt", "-", "--ext", "json"] }
auto-format = true

[[language]]
name = "jsonc"
formatter = { command = 'deno', args = ["fmt", "-", "--ext", "jsonc"] }
auto-format = true
