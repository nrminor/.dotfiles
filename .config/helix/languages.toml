[[language]]
name = "python"
language-servers = ["ruff", "basedpyright"]
auto-format = true

[language-server.ruff]
command = "ruff"
args = ["server"]

[language-server.ruff.config.settings]
lineLength = 100

[language-server.ruff.config.settings.lint]
select = ["ALL"]
ignore = ["D", "S101", "E501", "PTH123", "TD003"]

[language-server.basedpyright.config]
typeCheckingMode = "basic"

[[language]]
name = "rust"
language-servers = ["rust-analyzer"]
auto-format = true
file-types = ["rs", "ers"]
rulers = [100]

[language.auto-pairs]
'(' = ')'
'{' = '}'
'[' = ']'
'"' = '"'
'<' = '>'

[language-server.rust-analyzer.config.check]
command = "clippy"

[language-server.rust-analyzer.config.cargo]
features = "all"

[language-server.rust-analyzer.config] # see here for more: https://rust-analyzer.github.io/book/configuration.html
closureReturnTypeHints.enable = "always"
inlayHints.enable = true
inlayHints.lifetimeElisionHints.enable = true
inlayHints.lifetimeElisionHints.useParameterNames = true

[[language]]
name = "gleam"
auto-format = true

[[language]]
name = "go"
auto-format = true
formatter = { command = "goimports" }

[[language]]
name = "zig"
auto-format = true
scope = "source.zig"
injection-regex = "zig"
file-types = ["zig"]
roots = ["build.zig"]
language-servers = [ "zls" ]
indent = { tab-width = 4, unit = "    " }

[[language]]
name = "julia"
scope = "source.julia"
injection-regex = "julia"
file-types = ["jl"]
shebangs = ["julia"]
roots = ["Manifest.toml", "Project.toml"]
comment-token = "#"
block-comment-tokens = { start = "#=", end = "=#" }
language-servers = [ "julia" ]
indent = { tab-width = 4, unit = "    " }

[[grammar]]
name = "julia"
source = { git = "https://github.com/tree-sitter/tree-sitter-julia", rev = "e84f10db8eeb8b9807786bfc658808edaa1b4fa2" }

[language-server]
julia = { command = "julia", timeout = 60, args = [
  "--project=.",
  "--startup-file=yes",
  "--history-file=no",
  "--quiet",
  "-e",
  "using LanguageServer; runserver()",
] }

[[language]]
name = "toml"
formatter = { command = "taplo", args = ["fmt", "-"] }

[[language]]
name = "html"
language-servers = [{ name = "superhtml" }]
auto-format = true

[[language]]
name = "markdown"
scope = "source.md"
injection-regex = "md|markdown"
file-types = [
  "md",
  "markdown",
  "PULLREQ_EDITMSG",
  "mkd",
  "mdwn",
  "mdown",
  "markdn",
  "mdtxt",
  "mdtext",
  "qmd",
  "workbook",
]
roots = [".marksman.toml"]
language-servers = ["marksman"]
indent = { tab-width = 2, unit = "  " }

[[language]]
name = "ocaml"
file-types = ["ml", "mli"]
auto-format = true
indent = { tab-width = 2, unit = "  " }
formatter = { command = "ocamlformat", args = [
  "-",
  "--impl",
  # "--enable-outside-detected-project", # Enable only if you want to format files outside of projects
] }

[[language]]
name = "nix"
formatter = { command = "nixpkgs-fmt" }

[[language]]
name = "java"
scope = "source.java"
injection-regex = "java"
file-types = ["java"]
roots = ["pom.xml", "build.gradle", ]
indent = { tab-width = 4, unit = "    " }
language-servers = [ "jdtls" ]

[language-server.jdtls.config.java.inlayHints]
parameterNames.enabled = "all"

[[language]]
file-types = ["nf", "nf.test", {glob = "nextflow.config"}]
auto-format = true
language-servers = ["nextflow-language-server"]
name = "nextflow"
grammar = "groovy"
scope = "source.nextflow"
indent = { tab-width = 4, unit = "    " }

[language-server.nextflow-language-server]
command = "nextflow-language-server"

[language-server.nextflow-language-server.config.nextflow]
debug = true

[language-server.nextflow-language-server.config.nextflow.files]
exclude = [".git", ".nf-test", "work"]

[language-server.nextflow-language-server.config.nextflow.formatting]
harshilAlignment = true
